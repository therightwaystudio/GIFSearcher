package com.example.romanovsky_m.gifsearcher.DataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIKED_GIF_DATA".
*/
public class LikedGifDataDao extends AbstractDao<LikedGifData, String> {

    public static final String TABLENAME = "LIKED_GIF_DATA";

    /**
     * Properties of entity LikedGifData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property PREVIEW_URL = new Property(1, String.class, "PREVIEW_URL", false, "PREVIEW__URL");
        public final static Property GIF_URL = new Property(2, String.class, "GIF_URL", false, "GIF__URL");
        public final static Property WIDTH = new Property(3, String.class, "WIDTH", false, "WIDTH");
        public final static Property HEIGHT = new Property(4, String.class, "HEIGHT", false, "HEIGHT");
    }


    public LikedGifDataDao(DaoConfig config) {
        super(config);
    }
    
    public LikedGifDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIKED_GIF_DATA\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"PREVIEW__URL\" TEXT," + // 1: PREVIEW_URL
                "\"GIF__URL\" TEXT," + // 2: GIF_URL
                "\"WIDTH\" TEXT," + // 3: WIDTH
                "\"HEIGHT\" TEXT);"); // 4: HEIGHT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIKED_GIF_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LikedGifData entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String PREVIEW_URL = entity.getPREVIEW_URL();
        if (PREVIEW_URL != null) {
            stmt.bindString(2, PREVIEW_URL);
        }
 
        String GIF_URL = entity.getGIF_URL();
        if (GIF_URL != null) {
            stmt.bindString(3, GIF_URL);
        }
 
        String WIDTH = entity.getWIDTH();
        if (WIDTH != null) {
            stmt.bindString(4, WIDTH);
        }
 
        String HEIGHT = entity.getHEIGHT();
        if (HEIGHT != null) {
            stmt.bindString(5, HEIGHT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LikedGifData entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String PREVIEW_URL = entity.getPREVIEW_URL();
        if (PREVIEW_URL != null) {
            stmt.bindString(2, PREVIEW_URL);
        }
 
        String GIF_URL = entity.getGIF_URL();
        if (GIF_URL != null) {
            stmt.bindString(3, GIF_URL);
        }
 
        String WIDTH = entity.getWIDTH();
        if (WIDTH != null) {
            stmt.bindString(4, WIDTH);
        }
 
        String HEIGHT = entity.getHEIGHT();
        if (HEIGHT != null) {
            stmt.bindString(5, HEIGHT);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LikedGifData readEntity(Cursor cursor, int offset) {
        LikedGifData entity = new LikedGifData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PREVIEW_URL
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // GIF_URL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // WIDTH
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // HEIGHT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LikedGifData entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPREVIEW_URL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGIF_URL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWIDTH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHEIGHT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LikedGifData entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(LikedGifData entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LikedGifData entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
